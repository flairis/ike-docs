{
    "name": "ray.data.read_api.read_iceberg",
    "signature": "ray.data.read_api.read_iceberg(*, table_identifier: str, row_filter: Union[str, ForwardRef('BooleanExpression')] = None, parallelism: int = -1, selected_fields: Tuple[str, ...] = ('*',), snapshot_id: Optional[int] = None, scan_kwargs: Optional[Dict[str, str]] = None, catalog_kwargs: Optional[Dict[str, str]] = None, ray_remote_args: Optional[Dict[str, Any]] = None, override_num_blocks: Optional[int] = None) -> ray.data.dataset.Dataset",
    "summary": "Create a :class:`~ray.data.Dataset` from an Iceberg table.",
    "desc": "The table to read from is specified using a fully qualified ``table_identifier``.\nUsing PyIceberg, any intended row filters, selection of specific fields and\npicking of a particular snapshot ID are applied, and the files that satisfy\nthe query are distributed across Ray read tasks.\nThe number of output blocks is determined by ``override_num_blocks``\nwhich can be requested from this interface or automatically chosen if\nunspecified.\n\n.. tip::\n\n    For more details on PyIceberg, see\n    - URI: https://py.iceberg.apache.org/",
    "args": [
        {
            "name": "table_identifier",
            "type": null,
            "desc": "Fully qualified table identifier (``db_name.table_name``)"
        },
        {
            "name": "row_filter",
            "type": null,
            "desc": "A PyIceberg :class:`~pyiceberg.expressions.BooleanExpression`\nto use to filter the data *prior* to reading"
        },
        {
            "name": "parallelism",
            "type": null,
            "desc": "This argument is deprecated. Use ``override_num_blocks`` argument."
        },
        {
            "name": "selected_fields",
            "type": null,
            "desc": "Which columns from the data to read, passed directly to\nPyIceberg's load functions. Should be an tuple of string column names."
        },
        {
            "name": "snapshot_id",
            "type": null,
            "desc": "Optional snapshot ID for the Iceberg table, by default the latest\nsnapshot is used"
        },
        {
            "name": "scan_kwargs",
            "type": null,
            "desc": "Optional arguments to pass to PyIceberg's Table.scan() function\n(e.g., case_sensitive, limit, etc.)"
        },
        {
            "name": "catalog_kwargs",
            "type": null,
            "desc": "Optional arguments to pass to PyIceberg's catalog.load_catalog()\nfunction (e.g., name, type, etc.). For the function definition, see\n`pyiceberg catalog\n<https://py.iceberg.apache.org/reference/pyiceberg/catalog/             #pyiceberg.catalog.load_catalog>`_."
        },
        {
            "name": "ray_remote_args",
            "type": null,
            "desc": "Optional arguments to pass to `ray.remote` in the read tasks"
        },
        {
            "name": "override_num_blocks",
            "type": null,
            "desc": "Override the number of output blocks from all read tasks.\nBy default, the number of output blocks is dynamically decided based on\ninput data size and available resources, and capped at the number of\nphysical files to be read. You shouldn't manually set this value in most\ncases."
        }
    ],
    "returns": ":class:`~ray.data.Dataset` with rows from the Iceberg table.",
    "examples": [
        {
            "desc": null,
            "code": ">>> import ray\n>>> from pyiceberg.expressions import EqualTo  #doctest: +SKIP\n>>> ds = ray.data.read_iceberg( #doctest: +SKIP\n...     table_identifier=\"db_name.table_name\",\n...     row_filter=EqualTo(\"column_name\", \"literal_value\"),\n...     catalog_kwargs={\"name\": \"default\", \"type\": \"glue\"}\n... )"
        }
    ]
}