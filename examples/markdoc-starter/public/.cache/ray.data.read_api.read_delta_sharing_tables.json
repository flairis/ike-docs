{
    "name": "ray.data.read_api.read_delta_sharing_tables",
    "signature": "ray.data.read_api.read_delta_sharing_tables(url: str, *, limit: Optional[int] = None, version: Optional[int] = None, timestamp: Optional[str] = None, json_predicate_hints: Optional[str] = None, ray_remote_args: Optional[Dict[str, Any]] = None, concurrency: Optional[int] = None, override_num_blocks: Optional[int] = None) -> ray.data.dataset.Dataset",
    "summary": "Read data from a Delta Sharing table.",
    "desc": "Delta Sharing projct https://github.com/delta-io/delta-sharing/tree/main\n\nThis function reads data from a Delta Sharing table specified by the URL.\nIt supports various options such as limiting the number of rows, specifying\na version or timestamp, and configuring concurrency.\n\nBefore calling this function, ensure that the URL is correctly formatted\nto point to the Delta Sharing table you want to access. Make sure you have\na valid delta_share profile in the working directory.",
    "args": [
        {
            "name": "url",
            "type": null,
            "desc": "A URL under the format\n\"<profile-file-path>#<share-name>.<schema-name>.<table-name>\".\nExample can be found at\nhttps://github.com/delta-io/delta-sharing/blob/main/README.md#quick-start"
        },
        {
            "name": "limit",
            "type": null,
            "desc": "A non-negative integer. Load only the ``limit`` rows if the\nparameter is specified. Use this optional parameter to explore the\nshared table without loading the entire table into memory."
        },
        {
            "name": "version",
            "type": null,
            "desc": "A non-negative integer. Load the snapshot of the table at\nthe specified version."
        },
        {
            "name": "timestamp",
            "type": null,
            "desc": "A timestamp to specify the version of the table to read."
        },
        {
            "name": "json_predicate_hints",
            "type": null,
            "desc": "Predicate hints to be applied to the table. For more\ndetails, see:\nhttps://github.com/delta-io/delta-sharing/blob/main/PROTOCOL.md#json-predicates-for-filtering."
        },
        {
            "name": "ray_remote_args",
            "type": null,
            "desc": "kwargs passed to :meth:`~ray.remote` in the read tasks."
        },
        {
            "name": "concurrency",
            "type": null,
            "desc": "The maximum number of Ray tasks to run concurrently. Set this\nto control the number of tasks to run concurrently. This doesn't change the\ntotal number of tasks run or the total number of output blocks. By default,\nconcurrency is dynamically decided based on the available resources."
        },
        {
            "name": "override_num_blocks",
            "type": null,
            "desc": "Override the number of output blocks from all read tasks.\nBy default, the number of output blocks is dynamically decided based on\ninput data size and available resources. You shouldn't manually set this\nvalue in most cases."
        }
    ],
    "returns": "A :class:`Dataset` containing the queried data.",
    "examples": [
        {
            "desc": null,
            "code": ".. testcode::\n:skipif: True\n\nimport ray\n\nds = ray.data.read_delta_sharing_tables(\n    url=f\"your-profile.json#your-share-name.your-schema-name.your-table-name\",\n    limit=100000,\n    version=1,\n)"
        }
    ]
}