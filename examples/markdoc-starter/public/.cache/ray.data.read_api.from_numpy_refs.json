{
    "name": "ray.data.read_api.from_numpy_refs",
    "signature": "ray.data.read_api.from_numpy_refs(ndarrays: Union[ray.types.ObjectRef[numpy.ndarray], List[ray.types.ObjectRef[numpy.ndarray]]]) -> ray.data.dataset.MaterializedDataset",
    "summary": "Creates a :class:`~ray.data.Dataset` from a list of Ray object references to",
    "desc": "NumPy ndarrays.",
    "args": [
        {
            "name": "ndarrays",
            "type": null,
            "desc": "A Ray object reference to a NumPy ndarray or a list of Ray object\nreferences to NumPy ndarrays."
        }
    ],
    "returns": ":class:`~ray.data.Dataset` holding data from the given ndarrays.",
    "examples": [
        {
            "desc": null,
            "code": ">>> import numpy as np\n>>> import ray\n>>> arr_ref = ray.put(np.array([1]))\n>>> ray.data.from_numpy_refs(arr_ref)\nMaterializedDataset(num_blocks=1, num_rows=1, schema={data: int64})\n\nCreate a Ray Dataset from a list of NumPy array references.\n\n>>> ray.data.from_numpy_refs([arr_ref, arr_ref])\nMaterializedDataset(num_blocks=2, num_rows=2, schema={data: int64})"
        }
    ]
}