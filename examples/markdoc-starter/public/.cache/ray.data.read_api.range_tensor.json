{
    "name": "ray.data.read_api.range_tensor",
    "signature": "ray.data.read_api.range_tensor(n: int, *, shape: Tuple = (1,), parallelism: int = -1, concurrency: Optional[int] = None, override_num_blocks: Optional[int] = None) -> ray.data.dataset.Dataset",
    "summary": "Creates a :class:`~ray.data.Dataset` tensors of the provided shape from range",
    "desc": "[0...n].\n\nThis function allows for easy creation of synthetic tensor datasets for testing or\nbenchmarking :ref:`Ray Data <data>`.",
    "args": [
        {
            "name": "n",
            "type": null,
            "desc": "The upper bound of the range of tensor records."
        },
        {
            "name": "shape",
            "type": null,
            "desc": "The shape of each tensor in the dataset."
        },
        {
            "name": "parallelism",
            "type": null,
            "desc": "This argument is deprecated. Use ``override_num_blocks`` argument."
        },
        {
            "name": "concurrency",
            "type": null,
            "desc": "The maximum number of Ray tasks to run concurrently. Set this\nto control number of tasks to run concurrently. This doesn't change the\ntotal number of tasks run or the total number of output blocks. By default,\nconcurrency is dynamically decided based on the available resources."
        },
        {
            "name": "override_num_blocks",
            "type": null,
            "desc": "Override the number of output blocks from all read tasks.\nBy default, the number of output blocks is dynamically decided based on\ninput data size and available resources. You shouldn't manually set this\nvalue in most cases."
        }
    ],
    "returns": "A :class:`~ray.data.Dataset` producing the tensor data from range 0 to n.",
    "examples": [
        {
            "desc": null,
            "code": ">>> import ray\n>>> ds = ray.data.range_tensor(1000, shape=(2, 2))\n>>> ds\nDataset(num_rows=1000, schema={data: numpy.ndarray(shape=(2, 2), dtype=int64)})\n>>> ds.map_batches(lambda row: {\"data\": row[\"data\"] * 2}).take(2)\n[{'data': array([[0, 0],\n       [0, 0]])}, {'data': array([[2, 2],\n       [2, 2]])}]"
        }
    ]
}